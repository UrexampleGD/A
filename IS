local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local lp = Players.LocalPlayer

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "HintUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = lp:WaitForChild("PlayerGui")

-- Helper function
local function createButton(text, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 200, 0, 50)
    button.Position = UDim2.new(0.4, 0, 0.1, 0)
    button.Text = text
    button.BackgroundColor3 = Color3.fromRGB(255, 102, 102)
    button.Font = Enum.Font.GothamBold
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 18
    button.Parent = ScreenGui
    button.MouseButton1Click:Connect(callback)
    return button
end

-- MAIN GUI (Regular hints/messages)
local HintUI = Instance.new("Frame")
HintUI.Size = UDim2.new(0, 350, 0, 220)
HintUI.Position = UDim2.new(0.5, -175, 0.5, -110)
HintUI.BackgroundColor3 = Color3.fromRGB(255, 102, 102)
HintUI.Visible = false
HintUI.Parent = ScreenGui

Instance.new("UICorner", HintUI).CornerRadius = UDim.new(0, 10)
Instance.new("UIStroke", HintUI).Color = Color3.fromRGB(255, 255, 255)

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0.2, 0)
Title.Text = "Custom Hint/Message"
Title.Font = Enum.Font.GothamBold
Title.TextSize = 20
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.BackgroundTransparency = 1
Title.Parent = HintUI

local AnimatedBtn = Instance.new("TextButton")
AnimatedBtn.Size = UDim2.new(0, 180, 0, 30)
AnimatedBtn.Position = UDim2.new(1, 10, 0, 0)
AnimatedBtn.Text = "Animated Custom Hint & Message"
AnimatedBtn.Font = Enum.Font.GothamBold
AnimatedBtn.TextSize = 14
AnimatedBtn.TextWrapped = true
AnimatedBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
AnimatedBtn.BackgroundColor3 = Color3.fromRGB(80, 120, 255)
AnimatedBtn.Parent = HintUI
Instance.new("UICorner", AnimatedBtn).CornerRadius = UDim.new(0, 6)

local TextBox = Instance.new("TextBox")
TextBox.Size = UDim2.new(0.8, 0, 0.2, 0)
TextBox.Position = UDim2.new(0.1, 0, 0.3, 0)
TextBox.PlaceholderText = "Enter your message..."
TextBox.Font = Enum.Font.Gotham
TextBox.TextSize = 18
TextBox.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
TextBox.TextColor3 = Color3.fromRGB(0, 0, 0)
TextBox.Parent = HintUI
Instance.new("UICorner", TextBox).CornerRadius = UDim.new(0, 5)

local function createStyledButton(text, position, callback, parent, color)
    color = color or Color3.fromRGB(200, 50, 50) -- Default to red if no color provided
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.4, 0, 0.2, 0)
    button.Position = position
    button.Text = text
    button.Font = Enum.Font.GothamBold
    button.TextSize = 16
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.BackgroundColor3 = color
    Instance.new("UICorner", button).CornerRadius = UDim.new(0, 8)
    button.MouseButton1Click:Connect(callback)
    button.Parent = parent
end

createStyledButton("Show Hint", UDim2.new(0.1, 0, 0.6, 0), function()
    local hint = Instance.new("Hint")
    hint.Parent = game.Workspace
    hint.Text = TextBox.Text
end, HintUI)

createStyledButton("Show Message", UDim2.new(0.5, 0, 0.6, 0), function()
    local message = Instance.new("Message")
    message.Parent = game.Workspace
    message.Text = TextBox.Text
    task.delay(3, function() message:Destroy() end)
end, HintUI)

local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0.8, 0, 0.2, 0)
CloseButton.Position = UDim2.new(0.1, 0, 0.8, 0)
CloseButton.Text = "Close"
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextSize = 16
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.BackgroundColor3 = Color3.fromRGB(150, 50, 50)
Instance.new("UICorner", CloseButton).CornerRadius = UDim.new(0, 8)
CloseButton.Parent = HintUI
CloseButton.MouseButton1Click:Connect(function() HintUI.Visible = false end)

-- ANIMATED GUI (COMPLETELY SEPARATE)
local AnimatedUI = Instance.new("Frame")
AnimatedUI.Size = UDim2.new(0, 400, 0, 300) -- Larger size for more controls
AnimatedUI.Position = UDim2.new(0.5, -200, 0.5, -150)
AnimatedUI.BackgroundColor3 = Color3.fromRGB(90, 180, 255)
AnimatedUI.Visible = false
AnimatedUI.Parent = ScreenGui

Instance.new("UICorner", AnimatedUI).CornerRadius = UDim.new(0, 10)
Instance.new("UIStroke", AnimatedUI).Color = Color3.fromRGB(255, 255, 255)

local AnimatedTitle = Instance.new("TextLabel")
AnimatedTitle.Size = UDim2.new(1, 0, 0.15, 0)
AnimatedTitle.Text = "Animated Hint/Message"
AnimatedTitle.Font = Enum.Font.GothamBold
AnimatedTitle.TextSize = 20
AnimatedTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
AnimatedTitle.BackgroundTransparency = 1
AnimatedTitle.Parent = AnimatedUI

local BackBtn = Instance.new("TextButton")
BackBtn.Size = UDim2.new(0.8, 0, 0.1, 0) -- Changed size to match width of other buttons
BackBtn.Position = UDim2.new(0.1, 0, 0.85, 0) -- Centered position
BackBtn.Text = "Back to Regular"
BackBtn.Font = Enum.Font.GothamBold
BackBtn.TextSize = 14
BackBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
BackBtn.BackgroundColor3 = Color3.fromRGB(255, 102, 102)
BackBtn.Parent = AnimatedUI
Instance.new("UICorner", BackBtn).CornerRadius = UDim.new(0, 8)

local AnimatedTextBox = Instance.new("TextBox")
AnimatedTextBox.Size = UDim2.new(0.8, 0, 0.2, 0)
AnimatedTextBox.Position = UDim2.new(0.1, 0, 0.2, 0)
AnimatedTextBox.PlaceholderText = "Enter your message..."
AnimatedTextBox.Font = Enum.Font.Gotham
AnimatedTextBox.TextSize = 18
AnimatedTextBox.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
AnimatedTextBox.TextColor3 = Color3.fromRGB(0, 0, 0)
AnimatedTextBox.Parent = AnimatedUI
Instance.new("UICorner", AnimatedTextBox).CornerRadius = UDim.new(0, 5)

-- Speed Control Section
local SpeedControl = Instance.new("Frame")
SpeedControl.Size = UDim2.new(0.8, 0, 0.15, 0)
SpeedControl.Position = UDim2.new(0.1, 0, 0.45, 0)
SpeedControl.BackgroundTransparency = 1
SpeedControl.Parent = AnimatedUI

local SpeedLabel = Instance.new("TextLabel")
SpeedLabel.Size = UDim2.new(1, 0, 0.4, 0)
SpeedLabel.Text = "Animation Speed:"
SpeedLabel.Font = Enum.Font.Gotham
SpeedLabel.TextSize = 14
SpeedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
SpeedLabel.BackgroundTransparency = 1
SpeedLabel.TextXAlignment = Enum.TextXAlignment.Left
SpeedLabel.Parent = SpeedControl

local SpeedSlider = Instance.new("Frame")
SpeedSlider.Size = UDim2.new(1, 0, 0.3, 0)
SpeedSlider.Position = UDim2.new(0, 0, 0.4, 0)
SpeedSlider.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
SpeedSlider.Parent = SpeedControl
Instance.new("UICorner", SpeedSlider).CornerRadius = UDim.new(1, 0)

local SpeedFill = Instance.new("Frame")
SpeedFill.Size = UDim2.new(0.5, 0, 1, 0)
SpeedFill.BackgroundColor3 = Color3.fromRGB(80, 120, 255)
SpeedFill.Parent = SpeedSlider
Instance.new("UICorner", SpeedFill).CornerRadius = UDim.new(1, 0)

local SpeedValue = Instance.new("TextLabel")
SpeedValue.Size = UDim2.new(1, 0, 0.3, 0)
SpeedValue.Position = UDim2.new(0, 0, 0.7, 0)
SpeedValue.Text = "Current: 0.05 sec/char"
SpeedValue.Font = Enum.Font.Gotham
SpeedValue.TextSize = 12
SpeedValue.TextColor3 = Color3.fromRGB(255, 255, 255)
SpeedValue.BackgroundTransparency = 1
SpeedValue.TextXAlignment = Enum.TextXAlignment.Left
SpeedValue.Parent = SpeedControl

-- Animation duration control
local DurationControl = Instance.new("Frame")
DurationControl.Size = UDim2.new(0.8, 0, 0.15, 0)
DurationControl.Position = UDim2.new(0.1, 0, 0.65, 0)
DurationControl.BackgroundTransparency = 1
DurationControl.Parent = AnimatedUI

local DurationLabel = Instance.new("TextLabel")
DurationLabel.Size = UDim2.new(1, 0, 0.4, 0)
DurationLabel.Text = "Display Duration:"
DurationLabel.Font = Enum.Font.Gotham
DurationLabel.TextSize = 14
DurationLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
DurationLabel.BackgroundTransparency = 1
DurationLabel.TextXAlignment = Enum.TextXAlignment.Left
DurationLabel.Parent = DurationControl

local DurationSlider = Instance.new("Frame")
DurationSlider.Size = UDim2.new(1, 0, 0.3, 0)
DurationSlider.Position = UDim2.new(0, 0, 0.4, 0)
DurationSlider.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
DurationSlider.Parent = DurationControl
Instance.new("UICorner", DurationSlider).CornerRadius = UDim.new(1, 0)

local DurationFill = Instance.new("Frame")
DurationFill.Size = UDim2.new(0.5, 0, 1, 0)
DurationFill.BackgroundColor3 = Color3.fromRGB(80, 120, 255)
DurationFill.Parent = DurationSlider
Instance.new("UICorner", DurationFill).CornerRadius = UDim.new(1, 0)

local DurationValue = Instance.new("TextLabel")
DurationValue.Size = UDim2.new(1, 0, 0.3, 0)
DurationValue.Position = UDim2.new(0, 0, 0.7, 0)
DurationValue.Text = "Current: 3.0 seconds"
DurationValue.Font = Enum.Font.Gotham
DurationValue.TextSize = 12
DurationValue.TextColor3 = Color3.fromRGB(255, 255, 255)
DurationValue.BackgroundTransparency = 1
DurationValue.TextXAlignment = Enum.TextXAlignment.Left
DurationValue.Parent = DurationControl

-- Button functions
local function updateSpeed(positionX)
    local relativeX = math.clamp(positionX - SpeedSlider.AbsolutePosition.X, 0, SpeedSlider.AbsoluteSize.X)
    local ratio = relativeX / SpeedSlider.AbsoluteSize.X
    SpeedFill.Size = UDim2.new(ratio, 0, 1, 0)
    
    -- Map ratio from 0.01 (fast) to 0.2 (slow)
    local speed = 0.01 + (0.19 * (1 - ratio))
    SpeedValue.Text = string.format("Current: %.3f sec/char", speed)
    return speed
end

local function updateDuration(positionX)
    local relativeX = math.clamp(positionX - DurationSlider.AbsolutePosition.X, 0, DurationSlider.AbsoluteSize.X)
    local ratio = relativeX / DurationSlider.AbsoluteSize.X
    DurationFill.Size = UDim2.new(ratio, 0, 1, 0)
    
    -- Map ratio from 1 (short) to 10 (long) seconds
    local duration = 1 + (9 * ratio)
    DurationValue.Text = string.format("Current: %.1f seconds", duration)
    return duration
end

-- Slider interaction
local currentSpeed = 0.05
local currentDuration = 3.0

SpeedSlider.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        currentSpeed = updateSpeed(input.Position.X)
    end
end)

DurationSlider.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        currentDuration = updateDuration(input.Position.X)
    end
end)

UIS.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and UIS:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
        local mousePos = UIS:GetMouseLocation()
        
        if mousePos.Y >= SpeedSlider.AbsolutePosition.Y and 
           mousePos.Y <= SpeedSlider.AbsolutePosition.Y + SpeedSlider.AbsoluteSize.Y and
           mousePos.X >= SpeedSlider.AbsolutePosition.X and
           mousePos.X <= SpeedSlider.AbsolutePosition.X + SpeedSlider.AbsoluteSize.X then
            currentSpeed = updateSpeed(mousePos.X)
        elseif mousePos.Y >= DurationSlider.AbsolutePosition.Y and 
               mousePos.Y <= DurationSlider.AbsolutePosition.Y + DurationSlider.AbsoluteSize.Y and
               mousePos.X >= DurationSlider.AbsolutePosition.X and
               mousePos.X <= DurationSlider.AbsolutePosition.X + DurationSlider.AbsoluteSize.X then
            currentDuration = updateDuration(mousePos.X)
        end
    end
end)

-- Animated buttons (now blue) with TextWrapped
local function createAnimatedButton(text, position, callback, parent, color)
    color = color or Color3.fromRGB(80, 120, 255)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.4, 0, 0.2, 0)
    button.Position = position
    button.Text = text
    button.Font = Enum.Font.GothamBold
    button.TextSize = 16
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.BackgroundColor3 = color
    button.TextWrapped = true -- Added TextWrapped property
    Instance.new("UICorner", button).CornerRadius = UDim.new(0, 8)
    button.MouseButton1Click:Connect(callback)
    button.Parent = parent
    return button
end

createAnimatedButton("Show Animated Hint", UDim2.new(0.1, 0, 0.8, 0), function()
    local hint = Instance.new("Hint")
    hint.Parent = game.Workspace
    
    coroutine.wrap(function()
        local fullText = AnimatedTextBox.Text
        for i = 1, #fullText do
            hint.Text = string.sub(fullText, 1, i)
            task.wait(currentSpeed)
        end
        task.wait(currentDuration)
        hint:Destroy()
    end)()
end, AnimatedUI)

createAnimatedButton("Show Animated Message", UDim2.new(0.5, 0, 0.8, 0), function()
    local msg = Instance.new("Message")
    msg.Parent = game.Workspace
    
    coroutine.wrap(function()
        local fullText = AnimatedTextBox.Text
        for i = 1, #fullText do
            msg.Text = string.sub(fullText, 1, i)
            task.wait(currentSpeed)
        end
        task.wait(currentDuration)
        msg:Destroy()
    end)()
end, AnimatedUI)

-- Toggle between basic and animated UIs
local function toggleAnimatedUI()
    if AnimatedUI.Visible then
        AnimatedUI.Visible = false
        HintUI.Visible = true
    else
        HintUI.Visible = false
        AnimatedUI.Visible = true
    end
end

-- Button connections
AnimatedBtn.MouseButton1Click:Connect(toggleAnimatedUI)
BackBtn.MouseButton1Click:Connect(toggleAnimatedUI)

-- Show base button
local mainButton = createButton("Custom Hint/Message", function()
    HintUI.Visible = true
    AnimatedUI.Visible = false
end)

-- Dragging both GUIs
for _, frame in pairs({HintUI, AnimatedUI}) do
    local dragToggle, dragInput, dragStart, startPos

    local function updateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragToggle = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UIS.InputChanged:Connect(function(input)
        if input == dragInput and dragToggle then
            updateInput(input)
        end
    end)
end
